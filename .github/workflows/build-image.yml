name: Build and Publish Image
run-name: Build talosctl ${{ inputs.talosctl_version }}

on:
  workflow_dispatch:
    inputs:
      talosctl_version:
        description: 'Talosctl version to build'
        required: true
        type: string
      latest:
        description: 'Tag the image as latest'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Set image tags
        id: tags
        run: |
          VERSION_TAG="ghcr.io/joscha-alisch/talosctl:${{ inputs.talosctl_version }}"
          if [[ "${{ inputs.latest }}" == "true" ]]; then
            echo "tags=$VERSION_TAG,ghcr.io/joscha-alisch/talosctl:latest" >> $GITHUB_OUTPUT
          else
            echo "tags=$VERSION_TAG" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ steps.tags.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          build-args: |
            TALOSCTL_VERSION=${{ inputs.talosctl_version }}

      - name: Sign the published Docker image
        env:
          TAGS: ${{ steps.tags.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "$TAGS" | tr ',' '\n' | xargs -I {} cosign sign --yes {}@${DIGEST}
